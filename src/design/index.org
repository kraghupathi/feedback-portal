#+TITLE: Design of Feedback Portal/Service
#+AUTHOR: VLEAD
#+DATE: [2016-09-09 Fri]
#+SETUPFILE: ../org-templates/level-1.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil


* Introduction 
  The =design= of the =Feedback Portal/Service= is captured here.

  
* Application Programming Interface

** Display generic feedback form
  :PROPERTIES:
  :CUSTOM_ID: display_generic_feedback_form
  :END:    
  - URL :: /

  - Method :: GET

  - URL Params :: None

  - Success Response :: 
    + Code: 200

    + Content:
      {
       questions: [{name: 'question', 
                    type: 'radio | checkbox | textbox',
                    options: 'list of options' | 'size of text'}, ....]
      }

  - Error Response :: 

    + Code: 404 Not Found
    + Content: {"error": The requested URL was not found on the server.  If you
      entered the URL manually please check your spelling and try again }

  - Example ::
#+BEGIN_EXAMPLE
http://localhost:5000/
#+END_EXAMPLE



** Display lab generic feedback form 
  :PROPERTIES:
  :CUSTOM_ID: display_lab_generic_feedback_form
  :END:    
  - URL :: /feedback/lab

  - Method :: GET

  - URL Params ::  None

  - Success Response ::
    + Code: 200

    + Content:
      {
       questions: [{name: 'question', 
                    type: 'radio | checkbox | textbox',
                    options: 'list of options' | 'size of text'}, ....]
      }

  - Error Response ::

    + Code: 404 Not Found
    + Content: {"error": The requested URL was not found on the server.  If you
      entered the URL manually please check your spelling and try again }
    
  - Example ::
#+BEGIN_EXAMPLE
http://localhost:5000/feedback/lab
#+END_EXAMPLE



** Display experiment generic feedback form
  :PROPERTIES:
  :CUSTOM_ID: display_experiment_generic_feedback_form
  :END:    
  - URL :: /feedback/experiment

  - Method :: GET

  - URL Params ::
    None

  - Success Response ::
    + Code: 200

    + Content ::
      {
       questions: [{name: 'question', 
                    type: 'radio | checkbox | textbox',
                    options: 'list of options' | 'size of text'}, ....]
      }

  - Error Response ::
    + Code: 404 Not Found
    + Content: {"error": The requested URL was not found on the server.  If you
      entered the URL manually please check your spelling and try again }
    
  - Example ::
#+BEGIN_EXAMPLE
http://localhost:5000/feedback/experiment
#+END_EXAMPLE



** Display the feedback form
  :PROPERTIES:
  :CUSTOM_ID: display_feedback_form
  :END:    
  - URL :: /feedback?lab_name=:lab_name&exp_name=:exp_name&user_id=:user_id&key=:key
       OR
       /feedback?lab_name=:lab_name&exp_name=:exp_name&key=:key
       OR
       /feedback?lab_name=:lab_name&key=:key

  - Method :: GET

  - URL Params ::
    Required: lab_name=[string], key=[string]
    Optional: exp_name=[string], user_id=[string]

  - Success Response ::
    + Code: 200

    + Content ::
      {
       lab_name: 'lab_name',
       exp_name: 'exp_name',
       user_id: 'user_id',
       questions: [{name: 'question', 
                    type: 'radio | checkbox | textbox',
                    options: 'list of options' | 'size of text'}, ....]
      }

  - Error Response ::
    + Code: 401 UNAUTHORIZED

    + Content: { error : "Wrong Key configured" }

    OR

    + Code: 400 Bad Request

    + Content: { error : "lab name is mandatory and experiment is optional" }

  - Example ::
#+BEGIN_EXAMPLE
http://localhost:5000/feedback?lab_name=datastructures&exp_name=binarysearch&user_id=temp124&key=defaultkey
#+END_EXAMPLE



** Save generic feedback form. 
  :PROPERTIES:
  :CUSTOM_ID: save_generic_feedback_form
  :END:    
   The authentication for the =POST= is sent as part of header.
   - URL :: /

   - Method :: POST

   - Data Params ::
     {
        version: <version>,
        questions: [{name: 'question', 
                     answers: [ans1, ...]
       }

   - Success Response ::
     + Code: 200

     + Content:
       {
         status: "success"
       }

   - Error Response ::
     + Code: 400 Bad Request

     + Content: { error : "some of the parameters are not part of the
       request" }


** Save generic lab feedback form. 
  :PROPERTIES:
  :CUSTOM_ID: save_generic_lab_feedback_form
  :END:    

   - URL :: /feedback/lab

   - Method :: POST

   - Data Params ::
     {
        'version': '<version>',
        'lab_name': '<lab_name>',
        'responses': [{'name': '<question>', 
                     'answers': ['<ans1>', ...]
       }

   - Success Response ::
     + Code: 200

     + Content:
       {
         status: "success"
       }

   - Error Response ::
     + Code: 400 Bad Request

     + Content: { error : "some of the parameters are not part of the
       request" }


** Save generic exp feedback form. 
  :PROPERTIES:
  :CUSTOM_ID: save_generic_exp_feedback_form
  :END:    

   - URL :: /feedback/experiment

   - Method :: POST

   - Data Params ::
     {
        'version': '<version>',
        'lab_name': '<lab_name>',
        'exp_name': '<exp_name>',
        'responses': [{'name': '<question>', 
                     'answers': ['<ans1>', ...]
       }

   - Success Response ::
     + Code: 200

     + Content:
       {
         status: "success"
       }

   - Error Response ::
     + Code: 400 Bad Request

     + Content: { error : "some of the parameters are not part of the
       request" }


** Save the feedback form. 
  :PROPERTIES:
  :CUSTOM_ID: save_feedback_form
  :END:    
   The authentication for the =POST= is sent as part of header.
   - URL :: /feedback

   - Method :: POST

   - Data Params ::
     {
        lab_name: 'lab_name',
        exp_name: 'exp_name',
        user_id: 'user_id',
        questions: [{name: 'question', 
                     answers: [ans1, ...]
       }

   - Success Response ::
     + Code: 200

     + Content:
       {
         status: "success"
       }

   - Error Response ::
     + Code: 401 UNAUTHORIZED

     + Content: { error : "Wrong Key configured" }

     OR

     + Code: 400 Bad Request

     + Content: { error : "some of the parameters are not part of the
       request" }


** Get Workshop Usage
  :PROPERTIES:
  :CUSTOM_ID: get_workshop_usage
  :END:       
    - URL :: /usage_from_feedback?gateway_ip=:ip&date=:date&key=:key

    - Method :: GET

    - URL Params ::
      Required: ip=[string]
                date=[string], the format of the date string is in
      'mm-dd-yyyy' format. 
                key=[string]

    - Success Response ::
      + Code: 200

      + Content:
        {
         usage: 'usage_number'
        }

    - Error Response ::
      + Code: 401 UNAUTHORIZED

      + Content: { error : "Wrong Key configured" }

      OR

      + Code: 400 Bad Request

      + Content: { error : "IP and Date are mandatory and date should be in
        'mm-dd-yyyy' format" }


** Get all feedback forms for a date
  :PROPERTIES:
  :CUSTOM_ID: get_all_feedback_forms_for_a_date
  :END:          
    - URL :: /feedback_dump?date=:date&key=:key

    - Method :: GET

    - URL Params ::
      Required: date=[string], the format of the string is in 'dd-mm-yyyy'
      format
                key=[string]

    - Success Response ::
      + Code: 200

      + Content:
        {
         feedbacks: [{lab_name: 'lab_name',
                      exp_name: 'exp_name',
                      date: 'dd-mm-yyyy',
                      IP: 'ip',
                      responses: [{question: 'name',
                                   answers: ['val1',..]
                                  }, ...]
                     }, ...]
        }

    - Error Response ::
      + Code: 401 UNAUTHORIZED

      + Content: { error : "Wrong Key configured" }

      OR

      + Code: 400 Bad Request

      + Content: { error : "Date is mandatory and should be in 'dd-mm-yyyy' format" }

	
** Add the Question
  :PROPERTIES:
  :CUSTOM_ID: add_question
  :END:    

   - URL :: /questions

   - Method :: POST

   - Data Params ::
     {
      'name':'question_name',
      'question_type': 'question_type',
      'key': 'key'
     }

   - Success Response ::
     + Code: 200

     + Content:
       {
         status: "success"
       }

   - Error Response ::
     + Code: 401 UNAUTHORIZED

     + Content: { error : "Wrong Key configured" }

     OR

     + Code: 400 Bad Request

     + Content: { error : "some of the parameters are not part of the
       request" }


** Get all questions from the System
  :PROPERTIES:
  :CUSTOM_ID: get_all_questions
  :END:          
    - URL :: /questions

    - Method :: GET

    - URL Params ::
      None

    - Success Response ::
      + Code: 200

      + Content:
    [{"name": "<question1>", "question_type": "<radio>", "id":
         <id>}, ... {"name": "<question n>", "question_type": "<text>", "id": <id>}] 
 
    - Error Response ::

      + Code: 400 Bad Request


** Get question by id from the System
  :PROPERTIES:
  :CUSTOM_ID: get_question_by_id
  :END:          
    - URL :: /questions/<id>

    - Method :: GET

    - URL Params ::
      None

    - Success Response ::
      + Code: 200

      + Content:
    {
     "name": "<question1>", 
     "question_type": "<radio>", 
     "id":<id>
    }
 
    - Error Response ::

      + Code: 400 Bad Request


** Delete Question
  :PROPERTIES:
  :CUSTOM_ID: delete_question
  :END:    

   - URL :: /questions/<id>

   - Method :: DELETE

   - Data Params ::
     None

   - Success Response ::
     + Code: 200

     + Content:
       {
         status: "success"
       }

   - Error Response ::
     + Code: 401 UNAUTHORIZED

     + Content: { error : "Wrong Key configured" }

     OR

     + Code: 400 Bad Request

     + Content: { error : "some of the parameters are not part of the
       request" }


** Update the Question
  :PROPERTIES:
  :CUSTOM_ID: update_question
  :END:    

   - URL :: /questions/<id>

   - Method :: PUT

   - Data Params ::
     {
      'name':'question_name',
      'question_type': 'question_type',
      'key': 'key'
     }

   - Success Response ::
     + Code: 200

     + Content:
       {
         status: "success"
       }

   - Error Response ::
     + Code: 401 UNAUTHORIZED

     + Content: { error : "Wrong Key configured" }

     OR

     + Code: 400 Bad Request

     + Content: { error : "some of the parameters are not part of the
       request" }


** Dump college cloud data to ELK

   - URL :: /dump_cc_details_to_elastic_db

   - Method :: POST

   - Payload ::
#+BEGIN_EXAMPLE
   {
    "college_details":{ 
        "college_address":"<address>", 
        "college_name": "<college name>", 
        "college_pincode":"<pincode>", 
        "contact_name":"<name>", 
        "contact_no":"<mobile>", 
        "email_id":"<email>",
        "mac_addr":"<mac_addr>" },
    "key":"<key>"
   }

#+END_EXAMPLE
   - Example Payload ::
#+BEGIN_EXAMPLE
{
  "college_details": {
    "college_address": "Gachibowli, Hyderabad",
    "college_name": "iiit-h",
    "college_pincode": "516329",
    "contact_name": "VLEAD",
    "contact_no": "999999999",
    "email_id": "example@example.com",
    "mac_addr": "d8:02:99:5d:aa:fd"
  },
  "key": "defaultkey"
}
#+END_EXAMPLE                     
   - Success Response ::
     + Code: 200

     + Content:

       #+BEGIN_EXAMPLE
       {
       "status": "success"
       }
       
       #+END_EXAMPLE
   
  - Error Response ::
    + Code: 401 UNAUTHORIZED

    + Content: { error : "Not Authorized error: not Authorized to perform this action" }

    OR

    + Code: 400 Bad Request

    + Content: { error : "Malformed arguments" }

    OR

    + Code: 500

    + Content: { error : Exception String}
  - Example ::
    #+BEGIN_EXAMPLE
    http://localhost:5000/dump_cc_details_to_elastic_db
    #+END_EXAMPLE


** Dump feedback to ELK stack
  :PROPERTIES:
  :CUSTOM_ID: dump_feedback
  :END:    

   - URL :: /dump_feedback_to_elastic_db

   - Method :: POST

   - Payload ::
     {
      'feedbacks': ['list_of_feedbacks'],
      'key': 'key'
     }
   - Example Payload ::
     #+BEGIN_EXAMPLE

      {
        "key": "defaultkey",
        "feedbacks": [
          {
            "user_id": "Null",
            "responses": [
              {
                "question": {
                  "name": "Please provide any other feedback about Virtual Labs",
                  "question_type": "textarea",
                  "id": 21
                },
                "answers": [
                  {
                    "name": "test",
                    "id": 18
                  }
                ],
                "id": 40
              },
              {
                "question": {
                  "name": "Designation",
                  "question_type": "radio",
                  "id": 22
                },
                "answers": [
                  {
                    "name": "Student",
                    "id": 1
                  }
                ],
                "id": 1
              },
              {
                "question": {
                  "name": "Did you attempt any experiments ?",
                  "question_type": "radio",
                  "id": 23
                },
                "answers": [
                  {
                    "name": "No",
                    "id": 2
                  }
                ],
                "id": 10
              },
              {
                "question": {
                  "name": "Please rate your experience",
                  "question_type": "radio",
                  "id": 24
                },
                "answers": [
                  {
                    "name": "2/10",
                    "id": 4
                  }
                ],
                "id": 11
              }
            ],
            "exp_name": "Null",
            "lab_name": "generic feedback",
            "version": "generic-feedback-v2.0",
            "gateway_ip": "10.100.1.7",
            "date": "21-10-2016",
            "id": 14
          }
        ]
      }
     #+END_EXAMPLE
   - Success Response ::
     + Code: 200
     + Content:
       {
         status: "successfully added feedback records"
       }

   - Error Response ::
     + Code: 401 UNAUTHORIZED

     + Content: { error : "Wrong Key configured" }

     OR

     + Code: 400 Bad Request

     + Content: { error : "some of the parameters are not part of the
       request" }


** Dump usage to ELK stack
  :PROPERTIES:
  :CUSTOM_ID: dump_usage
  :END:    

   - URL :: /dump_usage_to_elastic_db

   - Method :: POST

   - Payload ::
     {
      'mac-addr': '<mac_addr>',
      'usages': ['list_of_usages'],
      'key': 'key'
     }

   - Example Payload :: 
     #+BEGIN_EXAMPLE
     {
              "key" : "defaultkey",
              "mac_addr": "d8:02:99:5d:aa:fd",
              "usages" : [
                  {
                      "LAB_ID": "CSE19",
                      "DATE_OF_EXPERIMENT": "2017-01-04",
                      "STUDENT_ID": "106ecd878f4148a5cabb6bbb0979b730",
                      "REGION": "anonymous",
                      "LAB_NAME": "Image Processing Lab",
                      "EXPERIMENT_NAME": "Distance and Connectivity",
                      "EXPERIMENT_ID": "E99751",
                      "TIME_OF_EXPERIMENT": "16:38",
                      "IP_ADDRESS": "10.100.1.7"
                  }
              ]
          }

     #+END_EXAMPLE

   - Success Response ::
     + Code: 200
     + Content:
       {
         status: "successfully added usage records"
       }

   - Error Response ::
     + Code: 401 UNAUTHORIZED

     + Content: { error : "Wrong Key configured" }

     OR

     + Code: 400 Bad Request

     + Content: { error : "some of the parameters are not part of the
       request" }


* Services Interplay
  :PROPERTIES:
  :CUSTOM_ID: services_interplay
  :END:          
    The following diagram summarizes the interplay of different services that
    enable collection of feedback and integration with =virtual labs= and
    =outreach portal=.

#+BEGIN_HTML
<img src="https://docs.google.com/drawings/d/1h7Tqof8X9u_V3qKAs8Yu6Jk9VzxjIzDz78FynwGYCVk/pub?w=960&amp;h=720">
<p align="center"> Services Interplay </p>
#+END_HTML

  To edit the feedback relations image click [[https://docs.google.com/drawings/d/1h7Tqof8X9u_V3qKAs8Yu6Jk9VzxjIzDz78FynwGYCVk/edit?usp=sharing][here]]


* Capturing workshop usage through feedback forms
  :PROPERTIES:
  :CUSTOM_ID: workshop_usage
  :END:          
  Realizes the [[../requirements/index.org::#workshop_usage][workshop usage]] requirement
  Feeback forms are submitted by the students attending a workshop after
  completion of each experiment.  Outreach facilitates conducting of workshops.
  The scenario below shows the way to capture the usage from the feedback forms
  submitted for a workshop.

#+BEGIN_HTML
<img src="https://docs.google.com/drawings/d/1bWGDP8jT7JUW49D0Wp7bI9uzqfZ8XGPWkCti7jqg17M/pub?w=960&amp;h=720">
<p align="center"> Workshop Usage </p>
#+END_HTML


  To edit the feedback relations image click [[https://docs.google.com/drawings/d/1bWGDP8jT7JUW49D0Wp7bI9uzqfZ8XGPWkCti7jqg17M/edit?usp=sharing][here]]


* Dynamic generation of =feedback form=
  :PROPERTIES:
  :CUSTOM_ID: form_generation
  :END:          
  Feebback form is built on the browser from the data that is sent as part of
  the [[./index.org::#display_feedback_form][=GET=]] response.  The response contains all the relevant data to build the
  form.  It will hold the questions, the =type= of the question like if the
  question is a radio button or a check box etc. and the values of all the
  options a question can have.

#+BEGIN_HTML
<img src="https://docs.google.com/drawings/d/10nfQZtJ7NJaDYKZru5DiXlS-YZaXQ1nlLoYb5-oRaCY/pub?w=960&amp;h=720">
<p align="center"> Workshop Usage </p>
#+END_HTML


    To edit the feedback relations image click [[https://docs.google.com/drawings/d/10nfQZtJ7NJaDYKZru5DiXlS-YZaXQ1nlLoYb5-oRaCY/edit?usp=sharing][here]]
    

* Dumping the data from the feedback service to Elastic Search
  :PROPERTIES:
  :CUSTOM_ID: dump_to_elastic_search
  :END:          
  The feedback forms submitted for a day are dumped into the machine running
  elastic search database to analyze the data.  [[./index.org::#get_feedback_on_a_day][API]] provides the interface to
  fetch all the feedback forms submitted on a given date.  A job that runs
  every night 5 minutes past the midnight [[./index.org::#get_feedback_on_a_day][fetches]] the list of feedback forms
  submitted the previous day and posts each feedback to the elastic search
  engine.
    
  Realizes the requirement [[../requirements/index.org::#analytics][Analytics]]
